# Docker Compose for Bio-MCP Development Environment with OpenAI Embeddings
# This configuration uses OpenAI embeddings exclusively (no local transformers)

services:
  bio-mcp:
    build: .
    container_name: bio-mcp-server
    environment:
      - BIO_MCP_LOG_LEVEL=DEBUG
      - BIO_MCP_SERVER_NAME=bio-mcp-dev-openai
      # Database configuration
      - DATABASE_URL=sqlite:///data/bio-mcp.db
      - WEAVIATE_URL=http://weaviate:8080
      # API keys - OpenAI required for this configuration
      - PUBMED_API_KEY=${PUBMED_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - BIO_MCP_OPENAI_API_KEY=${BIO_MCP_OPENAI_API_KEY:-${OPENAI_API_KEY}}
      # OpenAI embedding configuration
      - OPENAI_EMBEDDING_MODEL=${OPENAI_EMBEDDING_MODEL:-text-embedding-3-small}
      - OPENAI_EMBEDDING_DIMENSIONS=${OPENAI_EMBEDDING_DIMENSIONS:-1536}
    volumes:
      - ./data:/app/data
    depends_on:
      - weaviate
    stdin_open: true
    tty: true

  # Weaviate vector database - OpenAI-only configuration
  weaviate:
    command:
      - --host
      - 0.0.0.0
      - --port
      - '8080'
      - --scheme
      - http
    image: semitechnologies/weaviate:1.30.0
    container_name: bio-mcp-weaviate-openai
    ports:
      - "8080:8080"   # HTTP/REST API
      - "50051:50051" # gRPC API
    restart: on-failure:0
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-openai'
      ENABLE_MODULES: 'text2vec-openai,generative-openai'
      OPENAI_APIKEY: '${OPENAI_API_KEY}'
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - ./data/weaviate:/var/lib/weaviate

  # PostgreSQL for metadata storage
  postgres:
    image: postgres:15-alpine
    container_name: bio-mcp-postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"  # Use 5433 to avoid conflicts with existing PostgreSQL
    volumes:
      - ./data/postgres:/var/lib/postgresql/data

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: bio-mcp-minio
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # MinIO Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - ./data/minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

# Using local bind mounts for development
volumes:
  weaviate_data:
    driver: local
  postgres_data:
    driver: local
  minio_data:
    driver: local